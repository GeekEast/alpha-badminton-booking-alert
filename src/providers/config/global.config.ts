import { LogLevel, Provider } from "@nestjs/common"

const SERVICE_NAME = "BADMINTON-BOOKING-ALARM"

// basic config
const NODE_ENV = process.env.NODE_ENV || "development"
const PORT = process.env.FARGATE_EXPRESS_PORT || 80
const STAGE = process.env.STAGE
const REGION = process.env.REGION
const REGION_SHORT = process.env.REGION_SHORT

const IS_LOCAL = STAGE === "local" || STAGE === undefined || STAGE === ""
const IS_TEST = STAGE === "test"
const IS_OFFLINE = IS_LOCAL || IS_TEST

const IS_DEV = STAGE === "dev"
const IS_QA = STAGE === "qa"
const IS_SANDBOX = STAGE === "sandbox"
const IS_PRODUCT = STAGE === "product"
const IS_ONLINE = IS_DEV || IS_QA || IS_SANDBOX || IS_PRODUCT

// graphql
const GRAPHQL_PATH = `/api/${REGION}/graphql`
const GQL_NAME_PREFIX = "LI"

// logger
const DEFAULT_LOG_LEVELS_STR = "log,warn,error,debug,verbose"
const LOG_LEVELS_STR = process.env.LOG_LEVEL ? String(process.env.LOG_LEVEL).toLowerCase() : DEFAULT_LOG_LEVELS_STR
const LOG_LEVELS = LOG_LEVELS_STR.split(/[\s,]+/) as LogLevel[]

// event bus
const EVENT_BUS_NAME = process.env.EVENT_BUS_NAME
const EVENT_BUS_SOURCE = process.env.EVENT_BUS_SOURCE
const OFFLINE_EVENT_BUS_ENDPOINT = process.env.OFFLINE_EVENT_BUS_ENDPOINT

// secrets manager
const CORE_LI_SECRETS_MANAGER_NAME = process.env.CORE_LI_SECRETS_MANAGER_NAME
const PH_KEYS_SECRETS_MANAGER_NAME = process.env.PH_KEYS_SECRETS_MANAGER_NAME
const DOCUMENTDB_SECRETS_MANAGER_NAME = process.env.DOCUMENTDB_SECRETS_MANAGER_NAME

// endpoint
const FI_ENDPOINT = process.env.FI_ENDPOINT
const FI_GRAPHQL_ENDPOINT = `${FI_ENDPOINT}/api/${REGION}/graphql`

const IDP_ENDPOINT = process.env.IDP_ENDPOINT
const IDP_GRAPHQL_ENDPOINT = `${IDP_ENDPOINT}/api/${REGION}/graphql`
const IDP_NEST_ENDPOINT = process.env.IDP_NEST_ENDPOINT
const IDP_NEST_GRAPHQL_ENDPOINT = `${IDP_NEST_ENDPOINT}/api/${REGION}/graphql`

const ORG_ENDPOINT = process.env.ORG_ENDPOINT
const ORG_GRAPHQL_ENDPOINT = `${ORG_ENDPOINT}/api/${REGION}/graphql`

// internal communication
const PH_INTERNAL_SPECIAL_KEY_NAME = "hire"
const PH_INTERNAL_SPECIAL_KEY_VALUE = "heart"

// cookies name
const ACCESS_TOKEN_KEY = `ph_edge_access_token_${STAGE}`
const REFRESH_TOKEN_KEY = `ph_edge_refresh_token_${STAGE}`
const DEFAULT_AWS_REGION_KEY = "noFlush_default_region"
const XSRF_TOKEN_KEY_IN_COOKIES = "xsrf_token"
const XSRF_TOKEN_KEY_IN_HEADERS = "x-xsrf-token"
const DEVICE_TOKEN_KEY_PREFIX = `ph_edge_device_token_${STAGE}`
const FEDERATED_REQUEST_REFRESH_TOKEN_KEY = `x-refresh-token`
const XSRF_TOKEN_VALIDATION_IN_HEADERS = "x-xsrf-token-validation"

// appConfig
const APP_CONFIG_PORT = process.env.APP_CONFIG_PORT
const APP_CONFIG_EDGE_PERMISSIONS_CONFIG_NAME = "permission"
const APP_CONFIG_APPLICATION_NAME = `${STAGE}-${REGION_SHORT}-eng`

// docdb
const LOCAL_DOCUMENTDB_PRIMARY_ENDPOINT = process.env.LOCAL_DOCUMENTDB_PRIMARY_ENDPOINT
const LOCAL_DOCUMENTDB_SECONDARY_ENDPOINT = process.env.LOCAL_DOCUMENTDB_SECONDARY_ENDPOINT
const DOCUMENTDB_DBNAME = process.env.DOCUMENTDB_DBNAME
const DOCUMENTDB_ENDPOINT = process.env.DOCUMENTDB_ENDPOINT
const DOCUMENTDB_PRIMARY_CONNECTION_NAME = "mongoose.primaryConnection"
const DOCUMENTDB_SECONDARY_CONNECTION_NAME = "mongoose.secondaryConnection"

export const GLOBAL_CONFIG = {
  SERVICE_NAME,
  NODE_ENV,
  PORT,
  STAGE,
  REGION,
  REGION_SHORT,
  IS_LOCAL,
  IS_TEST,
  IS_OFFLINE,
  IS_DEV,
  IS_QA,
  IS_SANDBOX,
  IS_PRODUCT,
  IS_ONLINE,
  GQL_NAME_PREFIX,
  GRAPHQL_PATH,
  EVENT_BUS_NAME,
  EVENT_BUS_SOURCE,
  OFFLINE_EVENT_BUS_ENDPOINT,
  PH_INTERNAL_SPECIAL_KEY_NAME,
  PH_INTERNAL_SPECIAL_KEY_VALUE,
  FI_ENDPOINT,
  FI_GRAPHQL_ENDPOINT,
  IDP_ENDPOINT,
  IDP_GRAPHQL_ENDPOINT,
  IDP_NEST_ENDPOINT,
  IDP_NEST_GRAPHQL_ENDPOINT,
  ORG_ENDPOINT,
  ORG_GRAPHQL_ENDPOINT,
  XSRF_TOKEN_KEY_IN_COOKIES,
  XSRF_TOKEN_KEY_IN_HEADERS,
  ACCESS_TOKEN_KEY,
  REFRESH_TOKEN_KEY,
  DEFAULT_AWS_REGION_KEY,
  DEVICE_TOKEN_KEY_PREFIX,
  FEDERATED_REQUEST_REFRESH_TOKEN_KEY,
  XSRF_TOKEN_VALIDATION_IN_HEADERS,
  CORE_LI_SECRETS_MANAGER_NAME,
  PH_KEYS_SECRETS_MANAGER_NAME,
  DOCUMENTDB_SECRETS_MANAGER_NAME,
  LOG_LEVELS,
  APP_CONFIG_PORT,
  APP_CONFIG_EDGE_PERMISSIONS_CONFIG_NAME,
  APP_CONFIG_APPLICATION_NAME,
  LOCAL_DOCUMENTDB_PRIMARY_ENDPOINT,
  LOCAL_DOCUMENTDB_SECONDARY_ENDPOINT,
  DOCUMENTDB_DBNAME,
  DOCUMENTDB_ENDPOINT,
  DOCUMENTDB_PRIMARY_CONNECTION_NAME,
  DOCUMENTDB_SECONDARY_CONNECTION_NAME
}

export const GLOBAL_CONFIG_PROVIDER = "GLOBAL_CONFIG"
export const globalConfigProvider: Provider = {
  provide: GLOBAL_CONFIG_PROVIDER,
  useValue: GLOBAL_CONFIG
}
